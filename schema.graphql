input AcceptCandidacyInput {
	id: ID!
}
type Account {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	planId: ID
	status: SubscriptionStatus!
	stripeCustomerId: String
	stripeSubscriptionId: String
	trialEnd: DateTime
	plan: Plan
}
input AccountActivatePlanInput {
	id: ID!
	name: String!
	planCode: PlanCode!
}
input AccountUpdateInput {
	id: ID!
	paymentMethodId: String!
}
type Address {
	city: String!
	country: String
	line1: String!
	line2: String
	postalCode: String!
	inline: String!
}
input AddressInput {
	city: String!
	country: String
	line1: String!
	line2: String
	postalCode: String!
}
type Advertisement {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	published: Boolean!
	leaseType: LeaseType!
	rentAmount: Decimal!
	rentChargesAmount: Decimal
	depositAmount: Decimal!
	effectDate: DateTime!
	flexibility: LenderFlexibility
	referralLeaseId: ID
	propertyId: ID!
	title: String!
	description: String!
	property: Property!
}
scalar AuthenticationID
type Candidacy {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	status: CandidacyStatus!
	advertisementId: ID!
	personId: ID!
	moveInDate: DateTime!
	description: String!
	apl: Boolean
	birthdate: Date
	birthplace: String
	isStudent: Boolean
	tenant: Person!
	discussion: Discussion!
	workflow: Workflow
}
enum CandidacyStatus {
	PENDING
	REJECTED
	ACCEPTED
}
type Company implements LegalIdentityInterface {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	address: Address
	email: Email!
	legalEntity: String!
	legalEntityIdentifier: String
	legalEntityType: LegalEntityType
	legalEntityTypeOther: String
	phoneNumber: PhoneNumber
	displayName: String!
}
input CompleteStepInput {
	id: ID!
	requirements: [RequirementInput!]
}
type CompleteStepPayload {
	errors: [Error!]
	step: Step
}
input CreateAdvertisementInput {
	published: Boolean!
	leaseType: LeaseType!
	rentAmount: Decimal!
	rentChargesAmount: Decimal
	depositAmount: Decimal!
	effectDate: DateTime!
	flexibility: LenderFlexibility
	referralLeaseId: ID
	propertyId: ID!
	title: String!
	description: String!
}
input CreateCandidacyInput {
	advertisementId: ID!
	email: String!
	firstName: String!
	lastName: String!
	phoneNumber: PhoneNumber!
	moveInDate: DateTime!
	description: String!
	apl: Boolean
	birthdate: Date!
	birthplace: String
	isStudent: Boolean!
	files: [FileInput!]
	warrants: [CreateWarrantInput!]
}
type CreateNoticesPayload {
	errors: [Error!]
	notices: [File!]
}
input CreatePersonInput {
	email: Email!
	firstName: String!
	lastName: String!
	address: AddressInput
	phoneNumber: PhoneNumber
}
input CreateProfessionalWarrantInput {
	name: String!
	identifier: String!
}
input CreateWarrantInput {
	type: WarrantType!
	individual: CreatePersonInput
	company: CreateProfessionalWarrantInput
}
scalar Date
scalar DateTime
scalar Decimal
input DeleteDiscussionInput {
	id: ID!
}
type DeleteDiscussionPayload {
	errors: [Error!]
	id: ID
}
type Discussion {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	initiatorId: ID!
	status: DiscussionStatus!
	initiator: Person!
	items: [DiscussionItem!]!
	snippet: Message
	messages: [Message!]!
}
union DiscussionItem = | Candidacy
enum DiscussionStatus {
	ACTIVE
	CANDIDACY
}
scalar Email
type Error {
	message: String!
}
type Event {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	type: EventType!
	object: Eventable!
}
enum EventType {
	CANDIDACY_CREATED
	CANDIDACY_ACCEPTED
	CANDIDACY_REJECTED
	LEASE_CREATED
	PAYMENT_NOTICE_CREATED
	PAYMENT_NOTICE_SENT
	RENT_RECEIPT_CREATED
	RENT_RECEIPT_SENT
	TRANSACTION_CREATED
	STEP_COMPLETED
}
union Eventable = | File | Rent | Step | Lease | Transaction | Candidacy
type Feature {
	available: Boolean!
	title: String!
	key: String
}
type File {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	downloadUrl: URL
	externalId: String
	filename: String
	previewUrl: URL
	status: FileStatus
	type: FileType!
}
input FileInput {
	downloadUrl: URL!
	type: FileType!
}
"""
https://www.pdfmonkey.io/fr/doc/api/generer-un-document
"""
enum FileStatus {
	DRAFT
	FAILURE
	GENERATING
	PENDING
	SUCCESS
}
enum FileType {
	LEASE_DOCUMENT
	PAYMENT_NOTICE
	RENT_RECEIPT
}
input ImportInput {
	files: [FileInput!]!
	source: ImportSource!
}
enum ImportSource {
	RENTILA
}
scalar InviteToken
type Invoice {
	id: ID!
	number: Int!
	amountPaid: Decimal!
	invoicePdf: String!
	periodEnd: DateTime!
	status: String!
	planCode: PlanCode!
}
type Lease {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	depositAmount: Decimal!
	effectDate: DateTime!
	signatureDate: DateTime
	rentAmount: Decimal!
	rentChargesAmount: Decimal
	type: LeaseType!
	leaseId: ID
	propertyId: ID!
	data: LeaseFurnishedData
	expiredAt: DateTime
	renewDate: DateTime
	duration: LeaseFurnishedDuration!
	status: LeaseStatus!
	rentFullAmount: Decimal!
	rents: [Rent!]!
	lease: File
	tenants: [Tenant!]!
	account: Account
	property: Property!
}
type LeaseFurnishedData {
	chargesRecuperationMode: RentChargesRecuperationMode
	chargesRevisionMethod: String
	colocationInsuranceLender: Boolean
	colocationInsuranceMonthlyAmount: Decimal
	colocationInsuranceTotalAmount: Decimal
	duration: LeaseFurnishedDuration
	lenderFeeCap: Decimal
	lenderFeeCapOther: String
	lenderFeeCapPrestations: Decimal
	otherConditions: String
	rentComplement: Decimal
	rentComplementPropertyJustification: String
	rentFirstAmount: Decimal
	rentIrl: LeaseRentReferenceIrl
	rentIrlRevisionDate: DateTime
	rentMajDecreeIncreasedAmount: Decimal
	rentMajDecreeReferenceAmount: Decimal
	rentMajorationDecree: Boolean
	rentMaxEvolutionRelocation: Boolean
	rentPaymentDate: DateTime
	rentPaymentMethod: RentPaymentMethod
	rentPaymentPlace: String
	rentPeriodicity: LeaseRentPeriodicity
	rentUnderestimatedMethod: String
	rentUnderestimatedMonthlyVariation: Decimal
	resolutaryClause: String
	solidarityClause: String
	tenantFeeCapNewRental: Decimal
	tenantFeeCapPrestations: Decimal
	tenantFeeCapReportByMeter: Decimal
	tenantFeeCapReportPrestations: Decimal
	tenantLastRentAmount: Decimal
	tenantLastRentReceivedDate: DateTime
	tenantLastRentRevisionDate: DateTime
	worksDecenceSinceLastRental: String
	worksRentDecreaseTenant: String
	worksRentIncreaseLender: String
}
input LeaseFurnishedDataInput {
	chargesRecuperationMode: RentChargesRecuperationMode
	chargesRevisionMethod: String
	colocationInsuranceLender: Boolean
	colocationInsuranceMonthlyAmount: Decimal
	colocationInsuranceTotalAmount: Decimal
	duration: LeaseFurnishedDuration
	lenderFeeCap: Decimal
	lenderFeeCapOther: String
	lenderFeeCapPrestations: Decimal
	otherConditions: String
	rentComplement: Decimal
	rentComplementPropertyJustification: String
	rentFirstAmount: Decimal
	rentIrl: LeaseRentReferenceIrl
	rentIrlRevisionDate: DateTime
	rentMajDecreeIncreasedAmount: Decimal
	rentMajDecreeReferenceAmount: Decimal
	rentMajorationDecree: Boolean
	rentMaxEvolutionRelocation: Boolean
	rentPaymentDate: DateTime
	rentPaymentMethod: RentPaymentMethod
	rentPaymentPlace: String
	rentPeriodicity: LeaseRentPeriodicity
	rentUnderestimatedMethod: String
	rentUnderestimatedMonthlyVariation: Decimal
	resolutaryClause: String
	solidarityClause: String
	tenantFeeCapNewRental: Decimal
	tenantFeeCapPrestations: Decimal
	tenantFeeCapReportByMeter: Decimal
	tenantFeeCapReportPrestations: Decimal
	tenantLastRentAmount: Decimal
	tenantLastRentReceivedDate: DateTime
	tenantLastRentRevisionDate: DateTime
	worksDecenceSinceLastRental: String
	worksRentDecreaseTenant: String
	worksRentIncreaseLender: String
}
enum LeaseFurnishedDuration {
	NINE_MONTHS
	ONE_YEAR
}
input LeaseFurnishedInput {
	data: LeaseFurnishedDataInput
	depositAmount: Decimal!
	effectDate: DateTime!
	renewDate: DateTime
	file: FileInput
	propertyId: ID!
	rentAmount: Decimal!
	rentChargesAmount: Decimal
	signatureDate: DateTime
	tenantIds: [ID!]!
}
input LeaseFurnishedUpdateInput {
	data: LeaseFurnishedDataInput
	file: FileInput
	id: ID!
}
input LeaseNakedDataInput {
	duration: LeaseNakedDuration
}
enum LeaseNakedDuration {
	THREE_YEARS
	SIX_YEARS
}
input LeaseNakedInput {
	data: LeaseNakedDataInput
}
enum LeaseRentPeriodicity {
	ANNUALY
	MONTHLY
}
"""
https://www.service-public.fr/particuliers/vosdroits/F13723
"""
enum LeaseRentReferenceIrl {
	APRIL_FIRST_SEMESTER_Y2021
}
enum LeaseStatus {
	UNSIGNED
	ACTIVE
	ENDED
}
enum LeaseType {
	FURNISHED
	NAKED
}
enum LegalEntityType {
	EURL
	OTHER
	SA
	SARL
	SAS
	SASU
	SCI
	SCP
	SNC
}
union LegalIdentity = | Person | Company
interface LegalIdentityInterface {
	displayName: String!
}
type Lender {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	individualId: ID
	companyId: ID
	displayName: String!
	identity: LegalIdentity!
}
enum LenderFlexibility {
	ONE_DAY
	THREE_DAYS
	SEVEN_DAYS
}
input LenderIndividualUpdateInput {
	id: ID!
	individual: UserUpdateInput!
}
type Message {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	discussionId: ID!
	senderId: ID!
	content: String
	eventId: ID
	sender: Person!
	event: Event
}
type Mutation {
	userCreateWithAccount(input: UserWithAccountInput!): Person!
	signupUserFromInvite(input: SignupUserFromInviteInput!): Person!
	accountUpdatePaymentMethod(input: AccountUpdateInput!): Account!
	accountActivatePlan(input: AccountActivatePlanInput!): Account!
	tenantCreate(input: TenantInput!): Tenant!
	tenantUpdate(input: TenantUpdateInput!): Tenant!
	tenantDelete(id: ID!): ID!
	propertyCreate(input: PropertyInput!): Property!
	propertyUpdate(input: PropertyUpdateInput!): Property!
	propertyDelete(id: ID!): ID!
	createAdvertisement(input: CreateAdvertisementInput!): Advertisement!
	updateAdvertisement(input: UpdateAdvertisementInput!): Advertisement!
	leaseFurnishedCreate(input: LeaseFurnishedInput!): Lease!
	leaseFurnishedUpdate(input: LeaseFurnishedUpdateInput!): Lease!
	leaseNakedCreate(input: LeaseNakedInput!): Lease!
	leaseDelete(id: ID!): ID!
	lenderIndividualUpdate(input: LenderIndividualUpdateInput!): Lender!
	candidacyCreate(input: CreateCandidacyInput!): Candidacy!
	candidacyAccept(input: AcceptCandidacyInput!): Candidacy!
	transactionCreate(input: TransactionInput!): Transaction!
	transactionDelete(id: ID!): ID!
	fileUpload(input: FileInput!): File!
	importUpload(input: ImportInput!): Task!
	rentReceiptCreate(input: RentReceiptInput!): RentReceiptPayload!
	sendPaymentNotice(input: SendPaymentNoticeInput!): CreateNoticesPayload!
	pushMessage(input: PushMessageInput!): PushMessagePayload!
	deleteDiscussion(input: DeleteDiscussionInput!): DeleteDiscussionPayload!
	completeStep(input: CompleteStepInput!): CompleteStepPayload!
}
type Person implements PersonInterface & LegalIdentityInterface {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	authId: AuthenticationID
	email: Email!
	firstName: String!
	lastName: String!
	address: Address
	photoUrl: URL
	role: UserRole!
	phoneNumber: PhoneNumber
	displayName: String!
	account: Account!
	accounts: [Account!]
}
interface PersonInterface {
	firstName: String!
	lastName: String!
	displayName: String!
}
scalar PhoneNumber
type Plan {
	id: ID!
	code: PlanCode!
	price: Decimal
	subtitle: String
	title: String
	features: [Feature!]!
}
enum PlanCode {
	SOLO
}
type ProfessionalWarrant {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	name: String!
	identifier: String!
}
type Property {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	address: Address!
	buildPeriod: PropertyBuildPeriodType
	buildingLegalStatus: PropertyBuildingLegalStatus
	commonSpaces: String
	energyClass: PropertyEnergyClass
	equipments: String
	gasEmission: PropertyGasEmission
	heatingMethod: PropertyUsageType
	housingType: PropertyUsageType
	name: String!
	note: String
	nticEquipments: String
	otherSpaces: String
	tax: Decimal
	roomCount: PropertyRoomType!
	status: PropertyStatus!
	surface: Float!
	tenantPrivateSpaces: String
	usageType: PropertyHabitationUsageType
	waterHeatingMethod: PropertyUsageType
	lenderId: ID!
	expectedRents: Decimal
	collectedRents: Decimal
	lender: Lender!
	leases: [Lease!]!
	advertisements: [Advertisement!]!
}
enum PropertyBuildPeriodType {
	BEFORE_Y1949
	FROM_Y1949_Y1974
	FROM_Y1975_Y1989
	FROM_Y1990_Y2005
	FROM_Y2005
}
enum PropertyBuildingLegalStatus {
	COPRO
	MONO
}
enum PropertyEnergyClass {
	A
	B
	C
	D
	E
	F
	G
}
enum PropertyGasEmission {
	A
	B
	C
	D
	E
	F
	G
}
enum PropertyHabitationUsageType {
	HABITATION
	MIXTE
}
input PropertyInput {
	address: AddressInput!
	buildPeriod: PropertyBuildPeriodType!
	buildingLegalStatus: PropertyBuildingLegalStatus!
	commonSpaces: String
	energyClass: PropertyEnergyClass
	equipments: String
	gasEmission: PropertyGasEmission
	heatingMethod: PropertyUsageType!
	housingType: PropertyUsageType!
	lenderId: ID!
	name: String!
	note: String
	description: String
	nticEquipments: String
	otherSpaces: String
	roomCount: PropertyRoomType!
	status: PropertyStatus
	surface: Float!
	tax: Decimal
	tenantPrivateSpaces: String
	usageType: PropertyHabitationUsageType!
	waterHeatingMethod: PropertyUsageType!
}
enum PropertyRoomType {
	OTHER
	T1
	T2
	T3
	T4
	T5
	T6
}
enum PropertyStatus {
	FOR_SALE
	INACTIVE
	RENTED
	UNDER_CONSTRUCTION
	UNRENTED
}
input PropertyUpdateInput {
	address: AddressInput
	buildPeriod: PropertyBuildPeriodType
	buildingLegalStatus: PropertyBuildingLegalStatus
	commonSpaces: String
	energyClass: PropertyEnergyClass
	equipments: String
	gasEmission: PropertyGasEmission
	heatingMethod: PropertyUsageType
	housingType: PropertyUsageType
	id: ID!
	name: String
	note: String
	description: String
	nticEquipments: String
	otherSpaces: String
	roomCount: PropertyRoomType
	status: PropertyStatus
	surface: Float
	tax: Decimal
	tenantPrivateSpaces: String
	usageType: PropertyHabitationUsageType
	waterHeatingMethod: PropertyUsageType
}
enum PropertyUsageType {
	COLLECTIVE
	INDIVIDUAL
}
input PushMessageInput {
	discussionId: ID!
	senderId: ID!
	message: String!
}
type PushMessagePayload {
	errors: [Error!]
	message: Message
}
type Query {
	viewer: Person!
	advertisement(id: ID!): Advertisement!
	candidacy(id: ID!): Candidacy!
	candidacies(propertyId: ID): [Candidacy!]!
	properties(id: ID, query: String): [Property!]!
	tenants(id: ID, query: String, status: TenantStatus): [Tenant!]!
	leases(id: ID, query: String): [Lease!]!
	lenders(id: ID, query: String): [Lender!]!
	rents(since: DateTime!, until: DateTime!): [Rent!]!
	summary(since: DateTime!, until: DateTime!): Summary!
	events: [Event!]!
	discussions(id: ID): [Discussion!]!
	transactions(id: ID): [Transaction!]!
	invoices: [Invoice!]!
	plans: [Plan!]!
	files: [File!]!
}
type Rent {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	periodEnd: DateTime!
	periodStart: DateTime!
	amount: Decimal!
	chargesAmount: Decimal
	fullAmount: Decimal!
	status: RentStatus!
	leaseId: ID!
	receiptId: ID
	noticeId: ID
	delay: Int!
	lease: Lease!
	transactions: [Transaction!]!
	receipt: File
}
enum RentChargesRecuperationMode {
	PACKAGE
	PERIODIC
	REEL
}
enum RentPaymentMethod {
	AFTER
	BEFORE
}
input RentReceiptInput {
	rentIds: [ID!]!
	date: DateTime
	sendMail: Boolean
}
type RentReceiptPayload {
	errors: [Error!]
	receipts: [File!]
}
enum RentStatus {
	PARTIAL
	PENDING
	SETTLED
}
type Requirement {
	name: String!
	type: RequirementType!
	value: String
}
input RequirementInput {
	name: String!
	value: String!
}
enum RequirementType {
	DATE
}
input SendPaymentNoticeInput {
	rentIds: [ID!]!
	date: DateTime
}
input SignupUserFromInviteInput {
	authId: AuthenticationID!
	inviteToken: InviteToken!
}
type Step {
	id: ID!
	label: String!
	requirements: [Requirement!]
	completed: Boolean!
	completedAt: DateTime
}
"""
https://stripe.com/docs/billing/subscriptions/overview
"""
enum SubscriptionStatus {
	ACTIVE
	CANCELED
	INCOMPLETE
	INCOMPLETE_EXPIRED
	PAST_DUE
	TRIALING
	UNPAID
}
type Summary {
	id: ID!
	accountId: ID!
	createdAt: DateTime!
	amountExpected: Decimal!
	amountReceived: Decimal!
	amountSettled: Decimal!
	amountPartial: Decimal!
	amountPending: Decimal!
	nExpected: Int!
	nReceived: Int!
	nSettled: Int!
	nPartial: Int!
	nPending: Int!
	ratioExpected: Float!
	ratioReceived: Float!
	ratioSettled: Float!
	ratioPartial: Float!
	ratioPending: Float!
	variationExpected: Float!
	variationReceived: Float!
	variationSettled: Float!
	variationPartial: Float!
	variationPending: Float!
	paymentRate: Float!
	occupationRate: Float!
}
type Task {
	id: ID!
	status: String!
	progress: Int!
}
type Tenant implements PersonInterface {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	accountId: ID!
	personId: ID!
	apl: Boolean
	birthdate: Date
	birthplace: String
	email: Email!
	firstName: String!
	lastName: String!
	note: String
	phoneNumber: PhoneNumber
	status: TenantStatus!
	leaseId: ID
	isStudent: Boolean
	displayName: String!
	shortName: String!
	fullName: String!
	lastTransaction: Transaction
	account: Account
	property: Property
	propertyName: String
	rentPayedThisYear: String
	unpaidRentAmount: Decimal
	files: [File!]
	lease: Lease
	warrants: [Warrant!]!
}
input TenantInput {
	apl: Boolean
	birthdate: Date
	birthplace: String
	email: String!
	firstName: String!
	lastName: String!
	note: String
	phoneNumber: PhoneNumber
	isStudent: Boolean
	warrants: [CreateWarrantInput!]
	personId: ID
}
enum TenantStatus {
	CANDIDATE
	GONE
	LATE
	NEW
	UPTODATE
}
input TenantUpdateInput {
	apl: Boolean
	birthdate: Date
	birthplace: String
	email: String
	id: ID!
	firstName: String
	lastName: String
	note: String
	phoneNumber: PhoneNumber
	isStudent: Boolean
	warrants: [CreateWarrantInput!]
}
type Transaction {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	rentId: ID!
	amount: Decimal!
	date: DateTime!
	type: TransactionType!
	label: String
	lease: Lease!
}
input TransactionInput {
	amount: Decimal!
	leaseId: ID!
	date: DateTime!
	type: TransactionType
}
enum TransactionType {
	INSURANCE_HAB
	INSURANCE_PNO
	INVOICE
	LOAN_INTEREST
	LOAN_PAYMENT
	OTHER
	RENT
}
scalar URL
input UpdateAdvertisementInput {
	id: ID!
	published: Boolean
	leaseType: LeaseType
	rentAmount: Decimal
	rentChargesAmount: Decimal
	depositAmount: Decimal
	effectDate: DateTime
	flexibility: LenderFlexibility
	referralLeaseId: ID
	title: String
	description: String
}
enum UserRole {
	ADMIN
	CANDIDATE
	TENANT
	USER
	VIEWER
	WARRANT
}
input UserUpdateInput {
	address: AddressInput
	firstName: String
	lastName: String
}
input UserWithAccountInput {
	address: AddressInput
	authId: AuthenticationID!
	email: String!
	firstName: String!
	lastName: String!
	phoneNumber: String
	skipCreateCustomer: Boolean
}
type Warrant {
	id: ID!
	createdAt: DateTime
	updatedAt: DateTime
	type: WarrantType!
	tenantId: ID
	individualId: ID
	professionalId: ID
	candidacyId: ID
	identity: WarrantIdentity!
}
union WarrantIdentity = | Person | ProfessionalWarrant
enum WarrantType {
	PERSON
	VISALE
	COMPANY
}
type Workflow {
	id: ID!
	type: WorkflowType!
	steps: [Step!]!
}
enum WorkflowType {
	CANDIDACY
}
schema {
	query: Query
	mutation: Mutation
}
