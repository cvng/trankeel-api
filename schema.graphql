type Account {
	planId: ID
	status: String
	stripeCustomerId: String
	stripeSubscriptionId: String
	trialEnd: DateTime
	ownerId: String!
	id: ID!
	plan: Plan
}
input AccountActivatePlanInput {
	id: String!
}
input AccountUpdateInput {
	id: String!
}
type Address {
	city: String!
	country: String!
	line1: String!
	line2: String
	postalCode: String!
	inline: String!
}
scalar AuthID
type Company {
	address: Address
	displayName: String!
	email: Email!
	id: ID!
	legalEntity: String!
	legalEntityIdentifier: String!
	legalEntityType: String!
	legalEntityTypeOther: String!
	phoneNumber: PhoneNumber!
}
scalar DateTime
scalar Decimal
scalar Email
type Feature {
	available: Boolean!
	title: String!
	key: String!
}
type File {
	createdAt: DateTime!
	downloadUrl: String
	externalId: String
	filename: String
	previewUrl: String
	status: String
	type: String!
	updatedAt: DateTime
	id: ID!
}
input FileInput {
	id: String!
}
union Identity = | User | Company
input ImportInput {
	id: String!
}
type Invoice {
	id: ID!
	number: Int!
	amountPaid: Decimal!
	invoicePdf: String!
	periodEnd: DateTime!
	status: String!
	planCode: String!
}
type Lease {
	accountId: ID!
	depositAmount: Decimal
	effectDate: DateTime!
	signatureDate: DateTime
	rentAmount: Decimal!
	rentChargesAmount: Decimal
	rentFullAmount: Decimal!
	type: LeaseType!
	leaseId: ID
	propertyId: ID!
	id: ID!
	data: LeaseFurnishedData
	expiredAt: DateTime
	renewDate: DateTime
	status: LeaseStatus!
	lease: File
	rents: [Rent!]!
	tenants: [Tenant!]!
	account: Account
	property: Property
}
type LeaseFurnishedData {
	duration: String
	rentPaymentMethod: String
}
input LeaseFurnishedInput {
	id: String!
}
input LeaseFurnishedUpdateInput {
	id: String!
}
enum LeaseStatus {
	ACTIVE
	ENDED
}
enum LeaseType {
	FURNISHED
	NAKED
}
type Lender {
	id: ID!
	accountId: ID!
	individualId: ID
	companyId: ID
	displayName: String!
	identity: Identity
}
input LenderIndividualUpdateInput {
	id: String!
}
type Mutation {
	userCreateWithAccount(input: UserWithAccountInput!): Account!
	accountUpdatePaymentMethod(input: AccountUpdateInput!): Account!
	accountActivatePlan(input: AccountActivatePlanInput!): Account!
	tenantCreate(input: TenantInput!): Tenant!
	tenantUpdate(input: TenantUpdateInput!): Tenant!
	tenantDelete(id: ID!): ID!
	propertyCreate(input: PropertyInput!): Property!
	propertyUpdate(input: PropertyUpdateInput!): Property!
	propertyDelete(id: ID!): ID!
	leaseFurnishedCreate(input: LeaseFurnishedInput!): Lease!
	leaseDelete(id: ID!): ID!
	leaseFurnishedUpdate(input: LeaseFurnishedUpdateInput!): Lease!
	lenderIndividualUpdate(input: LenderIndividualUpdateInput!): Lender!
	transactionCreate(input: TransactionInput!): Transaction!
	transactionDelete(id: ID!): ID!
	fileUpload(input: FileInput!): File!
	importUpload(input: ImportInput!): Task!
	rentReceiptCreate(input: RentReceiptInput!): RentReceiptPayload!
}
scalar PhoneNumber
type Plan {
	code: String!
	price: Decimal
	subtitle: String
	title: String
	id: ID!
	features: [Feature!]!
}
type Property {
	accountId: ID
	address: Address!
	buildPeriod: String
	buildingLegalStatus: String
	commonSpaces: String
	energyClass: String
	equipments: String
	gasEmission: String
	heatingMethod: String
	housingType: String
	name: String!
	note: String
	nticEquipments: String
	otherSpaces: String
	tax: Float
	roomCount: String!
	status: String
	surface: Int!
	tenantPrivateSpaces: String
	usageType: String
	waterHeatingMethod: String
	id: ID!
	lenderId: ID!
	expectedRents: Decimal
	collectedRents: Decimal
	lender: Lender
	leases: [Lease!]!
}
input PropertyInput {
	id: String!
}
input PropertyUpdateInput {
	id: String!
}
type Query {
	viewer: User!
	properties(id: ID, query: String): [Property!]!
	summary(since: DateTime, until: DateTime): Summary!
	tenants(id: ID, query: String, status: TenantStatus): [Tenant!]!
	leases(id: ID, query: String): [Lease!]!
	lenders(id: ID, query: String): [Lender!]!
	transactions(id: ID): [Transaction!]!
	invoices: [Invoice!]!
	plans: [Plan!]!
	files: [File!]!
}
type Rent {
	id: ID!
	periodEnd: DateTime!
	periodStart: DateTime!
	amount: Decimal!
	chargesAmount: Decimal
	fullAmount: Decimal!
	status: RentStatus!
	accountId: ID!
	leaseId: ID!
	receiptId: ID
	transactionId: ID
	noticeId: ID
	transactions: [Transaction!]!
}
input RentReceiptInput {
	id: String!
}
type RentReceiptPayload {
	receipt: File!
}
enum RentStatus {
	PARTIAL
	PENDING
	SETTLED
}
type Summary {
	since: DateTime!
	until: DateTime!
	amountExpected: Decimal!
	amountReceived: Decimal!
	amountSettled: Decimal!
	amountPartial: Decimal!
	amountPending: Decimal!
	nExpected: Int!
	nReceived: Int!
	nSettled: Int!
	nPartial: Int!
	nPending: Int!
	ratioExpected: Float!
	ratioReceived: Float!
	ratioSettled: Float!
	ratioPartial: Float!
	ratioPending: Float!
	variationExpected: Float!
	variationReceived: Float!
	variationSettled: Float!
	variationPartial: Float!
	variationPending: Float!
	paymentRate: Float!
	occupationRate: Float!
}
type Task {
	id: ID!
	status: String!
	progress: Int!
}
type Tenant {
	accountId: ID!
	apl: Boolean!
	authId: AuthID
	birthdate: DateTime!
	birthplace: String
	email: String!
	firstName: String!
	lastName: String!
	displayName: String!
	note: String
	phoneNumber: String
	role: String
	id: ID!
	leaseId: ID
	visaleId: String
	account: Account
	property: Property
	status: TenantStatus!
	fullName: String!
	shortName: String!
	lastTransaction: Transaction
	propertyName: String
	rentPayedThisYear: String
	unpaidRentAmount: String
	files: [File!]!
	lease: Lease
}
input TenantInput {
	id: String!
}
enum TenantStatus {
	GONE
	LATE
	NEW
	UPTODATE
}
input TenantUpdateInput {
	id: String!
}
type Transaction {
	id: ID!
	date: DateTime!
	amount: Decimal!
	accountId: ID!
	type: String!
	lease: Lease
}
input TransactionInput {
	id: String!
}
type User {
	authId: AuthID!
	email: Email!
	firstName: String
	lastName: String
	address: Address
	photoURL: String
	role: String
	id: ID!
	phoneNumber: String
	accountId: ID!
	displayName: String!
	account: Account!
}
input UserWithAccountInput {
	id: String!
}
schema {
	query: Query
	mutation: Mutation
}
